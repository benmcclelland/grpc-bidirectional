// Code generated by protoc-gen-go. DO NOT EDIT.
// source: comms.proto

/*
Package comms is a generated protocol buffer package.

It is generated from these files:
	comms.proto

It has these top-level messages:
	StartReq
	StartResp
*/
package comms

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StartReq struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *StartReq) Reset()                    { *m = StartReq{} }
func (m *StartReq) String() string            { return proto.CompactTextString(m) }
func (*StartReq) ProtoMessage()               {}
func (*StartReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *StartReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type StartResp struct {
	Seq int64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
}

func (m *StartResp) Reset()                    { *m = StartResp{} }
func (m *StartResp) String() string            { return proto.CompactTextString(m) }
func (*StartResp) ProtoMessage()               {}
func (*StartResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *StartResp) GetSeq() int64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func init() {
	proto.RegisterType((*StartReq)(nil), "comms.StartReq")
	proto.RegisterType((*StartResp)(nil), "comms.StartResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Server service

type ServerClient interface {
	Start(ctx context.Context, opts ...grpc.CallOption) (Server_StartClient, error)
}

type serverClient struct {
	cc *grpc.ClientConn
}

func NewServerClient(cc *grpc.ClientConn) ServerClient {
	return &serverClient{cc}
}

func (c *serverClient) Start(ctx context.Context, opts ...grpc.CallOption) (Server_StartClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Server_serviceDesc.Streams[0], c.cc, "/comms.Server/Start", opts...)
	if err != nil {
		return nil, err
	}
	x := &serverStartClient{stream}
	return x, nil
}

type Server_StartClient interface {
	Send(*StartReq) error
	Recv() (*StartResp, error)
	grpc.ClientStream
}

type serverStartClient struct {
	grpc.ClientStream
}

func (x *serverStartClient) Send(m *StartReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serverStartClient) Recv() (*StartResp, error) {
	m := new(StartResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Server service

type ServerServer interface {
	Start(Server_StartServer) error
}

func RegisterServerServer(s *grpc.Server, srv ServerServer) {
	s.RegisterService(&_Server_serviceDesc, srv)
}

func _Server_Start_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServerServer).Start(&serverStartServer{stream})
}

type Server_StartServer interface {
	Send(*StartResp) error
	Recv() (*StartReq, error)
	grpc.ServerStream
}

type serverStartServer struct {
	grpc.ServerStream
}

func (x *serverStartServer) Send(m *StartResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serverStartServer) Recv() (*StartReq, error) {
	m := new(StartReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Server_serviceDesc = grpc.ServiceDesc{
	ServiceName: "comms.Server",
	HandlerType: (*ServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Start",
			Handler:       _Server_Start_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "comms.proto",
}

func init() { proto.RegisterFile("comms.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 130 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4e, 0xce, 0xcf, 0xcd,
	0x2d, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x73, 0x94, 0xa4, 0xb8, 0x38, 0x82,
	0x4b, 0x12, 0x8b, 0x4a, 0x82, 0x52, 0x0b, 0x85, 0xf8, 0xb8, 0x98, 0x32, 0x53, 0x24, 0x18, 0x15,
	0x18, 0x35, 0x38, 0x83, 0x98, 0x32, 0x53, 0x94, 0x64, 0xb9, 0x38, 0xa1, 0x72, 0xc5, 0x05, 0x42,
	0x02, 0x5c, 0xcc, 0xc5, 0xa9, 0x85, 0x60, 0x59, 0xe6, 0x20, 0x10, 0xd3, 0xc8, 0x8a, 0x8b, 0x2d,
	0x38, 0xb5, 0xa8, 0x2c, 0xb5, 0x48, 0xc8, 0x80, 0x8b, 0x15, 0xac, 0x50, 0x88, 0x5f, 0x0f, 0x62,
	0x05, 0xcc, 0x48, 0x29, 0x01, 0x54, 0x81, 0xe2, 0x02, 0x25, 0x06, 0x0d, 0x46, 0x03, 0xc6, 0x24,
	0x36, 0xb0, 0x23, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x75, 0x4a, 0x8f, 0xde, 0x93, 0x00,
	0x00, 0x00,
}
