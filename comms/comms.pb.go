// Code generated by protoc-gen-go. DO NOT EDIT.
// source: comms.proto

package comms

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Req struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status               bool     `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	Seq                  int64    `protobuf:"varint,3,opt,name=seq,proto3" json:"seq,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Req) Reset()         { *m = Req{} }
func (m *Req) String() string { return proto.CompactTextString(m) }
func (*Req) ProtoMessage()    {}
func (*Req) Descriptor() ([]byte, []int) {
	return fileDescriptor_db39efb7717b7d47, []int{0}
}

func (m *Req) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Req.Unmarshal(m, b)
}
func (m *Req) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Req.Marshal(b, m, deterministic)
}
func (m *Req) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Req.Merge(m, src)
}
func (m *Req) XXX_Size() int {
	return xxx_messageInfo_Req.Size(m)
}
func (m *Req) XXX_DiscardUnknown() {
	xxx_messageInfo_Req.DiscardUnknown(m)
}

var xxx_messageInfo_Req proto.InternalMessageInfo

func (m *Req) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Req) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *Req) GetSeq() int64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

type Resp struct {
	Seq                  int64    `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Resp) Reset()         { *m = Resp{} }
func (m *Resp) String() string { return proto.CompactTextString(m) }
func (*Resp) ProtoMessage()    {}
func (*Resp) Descriptor() ([]byte, []int) {
	return fileDescriptor_db39efb7717b7d47, []int{1}
}

func (m *Resp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Resp.Unmarshal(m, b)
}
func (m *Resp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Resp.Marshal(b, m, deterministic)
}
func (m *Resp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Resp.Merge(m, src)
}
func (m *Resp) XXX_Size() int {
	return xxx_messageInfo_Resp.Size(m)
}
func (m *Resp) XXX_DiscardUnknown() {
	xxx_messageInfo_Resp.DiscardUnknown(m)
}

var xxx_messageInfo_Resp proto.InternalMessageInfo

func (m *Resp) GetSeq() int64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func init() {
	proto.RegisterType((*Req)(nil), "comms.Req")
	proto.RegisterType((*Resp)(nil), "comms.Resp")
}

func init() { proto.RegisterFile("comms.proto", fileDescriptor_db39efb7717b7d47) }

var fileDescriptor_db39efb7717b7d47 = []byte{
	// 153 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4e, 0xce, 0xcf, 0xcd,
	0x2d, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x73, 0x94, 0xec, 0xb9, 0x98, 0x83,
	0x52, 0x0b, 0x85, 0xf8, 0xb8, 0x98, 0x32, 0x53, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x98,
	0x32, 0x53, 0x84, 0xc4, 0xb8, 0xd8, 0x8a, 0x4b, 0x12, 0x4b, 0x4a, 0x8b, 0x25, 0x98, 0x14, 0x18,
	0x35, 0x38, 0x82, 0xa0, 0x3c, 0x21, 0x01, 0x2e, 0xe6, 0xe2, 0xd4, 0x42, 0x09, 0x66, 0x05, 0x46,
	0x0d, 0xe6, 0x20, 0x10, 0x53, 0x49, 0x82, 0x8b, 0x25, 0x28, 0xb5, 0xb8, 0x00, 0x26, 0xc3, 0x08,
	0x97, 0x31, 0xd2, 0xe3, 0x62, 0x09, 0xcf, 0x2f, 0xca, 0x16, 0x52, 0xe3, 0x62, 0xf5, 0x48, 0xcd,
	0xc9, 0xc9, 0x17, 0xe2, 0xd2, 0x83, 0x38, 0x20, 0x28, 0xb5, 0x50, 0x8a, 0x1b, 0xce, 0x2e, 0x2e,
	0x50, 0x62, 0xd0, 0x60, 0x34, 0x60, 0x4c, 0x62, 0x03, 0x3b, 0xcc, 0x18, 0x10, 0x00, 0x00, 0xff,
	0xff, 0xd4, 0xff, 0x6f, 0x3b, 0xa7, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WorkClient is the client API for Work service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WorkClient interface {
	Hello(ctx context.Context, opts ...grpc.CallOption) (Work_HelloClient, error)
}

type workClient struct {
	cc *grpc.ClientConn
}

func NewWorkClient(cc *grpc.ClientConn) WorkClient {
	return &workClient{cc}
}

func (c *workClient) Hello(ctx context.Context, opts ...grpc.CallOption) (Work_HelloClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Work_serviceDesc.Streams[0], "/comms.Work/Hello", opts...)
	if err != nil {
		return nil, err
	}
	x := &workHelloClient{stream}
	return x, nil
}

type Work_HelloClient interface {
	Send(*Req) error
	Recv() (*Resp, error)
	grpc.ClientStream
}

type workHelloClient struct {
	grpc.ClientStream
}

func (x *workHelloClient) Send(m *Req) error {
	return x.ClientStream.SendMsg(m)
}

func (x *workHelloClient) Recv() (*Resp, error) {
	m := new(Resp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WorkServer is the server API for Work service.
type WorkServer interface {
	Hello(Work_HelloServer) error
}

func RegisterWorkServer(s *grpc.Server, srv WorkServer) {
	s.RegisterService(&_Work_serviceDesc, srv)
}

func _Work_Hello_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WorkServer).Hello(&workHelloServer{stream})
}

type Work_HelloServer interface {
	Send(*Resp) error
	Recv() (*Req, error)
	grpc.ServerStream
}

type workHelloServer struct {
	grpc.ServerStream
}

func (x *workHelloServer) Send(m *Resp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *workHelloServer) Recv() (*Req, error) {
	m := new(Req)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Work_serviceDesc = grpc.ServiceDesc{
	ServiceName: "comms.Work",
	HandlerType: (*WorkServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Hello",
			Handler:       _Work_Hello_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "comms.proto",
}
