// Code generated by protoc-gen-go. DO NOT EDIT.
// source: comms.proto

/*
Package comms is a generated protocol buffer package.

It is generated from these files:
	comms.proto

It has these top-level messages:
	Req
	Resp
*/
package comms

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Req struct {
	Id     string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Status bool   `protobuf:"varint,2,opt,name=status" json:"status,omitempty"`
}

func (m *Req) Reset()                    { *m = Req{} }
func (m *Req) String() string            { return proto.CompactTextString(m) }
func (*Req) ProtoMessage()               {}
func (*Req) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Req) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Req) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

type Resp struct {
	Seq int64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
}

func (m *Resp) Reset()                    { *m = Resp{} }
func (m *Resp) String() string            { return proto.CompactTextString(m) }
func (*Resp) ProtoMessage()               {}
func (*Resp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Resp) GetSeq() int64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func init() {
	proto.RegisterType((*Req)(nil), "comms.Req")
	proto.RegisterType((*Resp)(nil), "comms.Resp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Work service

type WorkClient interface {
	Hello(ctx context.Context, opts ...grpc.CallOption) (Work_HelloClient, error)
}

type workClient struct {
	cc *grpc.ClientConn
}

func NewWorkClient(cc *grpc.ClientConn) WorkClient {
	return &workClient{cc}
}

func (c *workClient) Hello(ctx context.Context, opts ...grpc.CallOption) (Work_HelloClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Work_serviceDesc.Streams[0], c.cc, "/comms.Work/Hello", opts...)
	if err != nil {
		return nil, err
	}
	x := &workHelloClient{stream}
	return x, nil
}

type Work_HelloClient interface {
	Send(*Req) error
	Recv() (*Resp, error)
	grpc.ClientStream
}

type workHelloClient struct {
	grpc.ClientStream
}

func (x *workHelloClient) Send(m *Req) error {
	return x.ClientStream.SendMsg(m)
}

func (x *workHelloClient) Recv() (*Resp, error) {
	m := new(Resp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Work service

type WorkServer interface {
	Hello(Work_HelloServer) error
}

func RegisterWorkServer(s *grpc.Server, srv WorkServer) {
	s.RegisterService(&_Work_serviceDesc, srv)
}

func _Work_Hello_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WorkServer).Hello(&workHelloServer{stream})
}

type Work_HelloServer interface {
	Send(*Resp) error
	Recv() (*Req, error)
	grpc.ServerStream
}

type workHelloServer struct {
	grpc.ServerStream
}

func (x *workHelloServer) Send(m *Resp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *workHelloServer) Recv() (*Req, error) {
	m := new(Req)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Work_serviceDesc = grpc.ServiceDesc{
	ServiceName: "comms.Work",
	HandlerType: (*WorkServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Hello",
			Handler:       _Work_Hello_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "comms.proto",
}

func init() { proto.RegisterFile("comms.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 145 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4e, 0xce, 0xcf, 0xcd,
	0x2d, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x73, 0x94, 0x74, 0xb9, 0x98, 0x83,
	0x52, 0x0b, 0x85, 0xf8, 0xb8, 0x98, 0x32, 0x53, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x98,
	0x32, 0x53, 0x84, 0xc4, 0xb8, 0xd8, 0x8a, 0x4b, 0x12, 0x4b, 0x4a, 0x8b, 0x25, 0x98, 0x14, 0x18,
	0x35, 0x38, 0x82, 0xa0, 0x3c, 0x25, 0x09, 0x2e, 0x96, 0xa0, 0xd4, 0xe2, 0x02, 0x21, 0x01, 0x2e,
	0xe6, 0xe2, 0xd4, 0x42, 0xb0, 0x06, 0xe6, 0x20, 0x10, 0xd3, 0x48, 0x8f, 0x8b, 0x25, 0x3c, 0xbf,
	0x28, 0x5b, 0x48, 0x8d, 0x8b, 0xd5, 0x23, 0x35, 0x27, 0x27, 0x5f, 0x88, 0x4b, 0x0f, 0x62, 0x5d,
	0x50, 0x6a, 0xa1, 0x14, 0x37, 0x9c, 0x5d, 0x5c, 0xa0, 0xc4, 0xa0, 0xc1, 0x68, 0xc0, 0x98, 0xc4,
	0x06, 0x76, 0x86, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xf1, 0x4a, 0xe9, 0x76, 0x95, 0x00, 0x00,
	0x00,
}
